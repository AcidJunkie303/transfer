<#
.SYNOPSIS
    Spawns a new cmd.exe running under the context of the local system account.
.DESCRIPTION
    Spawns a new cmd.exe running under the context of the local system account. 
.NOTES
    The process executing this powershell script needs to run with local admin privileges
#>
Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;

public class NativeMethods {

    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern bool OpenProcessToken(IntPtr ProcessHandle, UInt32 DesiredAccess, out IntPtr TokenHandle);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr OpenProcess(UInt32 dwDesiredAccess, bool bInheritHandle, UInt32 dwProcessId);

    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern bool DuplicateTokenEx(IntPtr hExistingToken, uint dwDesiredAccess, IntPtr lpTokenAttributes, int ImpersonationLevel, int TokenType, out IntPtr phNewToken);

    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
    public static extern bool CreateProcessWithTokenW(IntPtr hToken, UInt32 dwLogonFlags, string lpApplicationName, string lpCommandLine, UInt32 dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

	[DllImport("kernel32.dll")]
    public static extern bool CloseHandle(IntPtr handle);

	[DllImport("kernel32.dll")]
    public static extern int GetLastError();

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct STARTUPINFO {
        public Int32 cb;
        public string lpReserved;
        public string lpDesktop;
        public string lpTitle;
        public Int32 dwX;
        public Int32 dwY;
        public Int32 dwXSize;
        public Int32 dwYSize;
        public Int32 dwXCountChars;
        public Int32 dwYCountChars;
        public Int32 dwFillAttribute;
        public Int32 dwFlags;
        public Int16 wShowWindow;
        public Int16 cbReserved2;
        public IntPtr lpReserved2;
        public IntPtr hStdInput;
        public IntPtr hStdOutput;
        public IntPtr hStdError;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct PROCESS_INFORMATION {
        public IntPtr hProcess;
        public IntPtr hThread;
        public int dwProcessId;
        public int dwThreadId;
    }
}
"@ -Language CSharp

function ThrowWin32Exception( [Parameter(Mandatory=$true)] [int] $errorCode)
{  
    throw (New-Object "System.ComponentModel.Win32Exception" $errorCode)
}

$currentSessionId = [System.Diagnostics.Process]::GetCurrentProcess().SessionId

$winlogonProcess = [System.Diagnostics.Process]::GetProcessesByName("winlogon") | Where-Object {$_.SessionId -eq $currentSessionId} | Select-Object -First 1
if (!$winlogonProcess) {
	throw "No winlogon process found in session $currentSessionId"
}

$winlogonProcessId = $winlogonProcess.Id

$TOKEN_ALL_ACCESS = 0xF01FF
$TOKEN_DUPLICATE = 0x0002
$PROCESS_DUP_HANDLE = 0x0040
$PROCESS_QUERY_INFORMATION = 0x0400
$SecurityImpersonation = 2
$TokenPrimary = 1

$applicationName = "cmd.exe"
$commandLine = ""
$creationFlags = 0
$currentDirectory = [System.IO.Directory]::GetCurrentDirectory()
$si = New-Object "NativeMethods+STARTUPINFO"
$si.cb = [System.Runtime.InteropServices.Marshal]::SizeOf($si)
$pi = New-Object "NativeMethods+PROCESS_INFORMATION"
$tokenHandle = [IntPtr]::Zero
$duplicateTokenHandle = [IntPtr]::Zero

try {
        
    $processHandle = [NativeMethods]::OpenProcess($PROCESS_DUP_HANDLE -bor $PROCESS_QUERY_INFORMATION, $true, $winlogonProcessId)
    if ($processHandle -eq [IntPtr]::Zero) {
        ThrowWin32Exception ([NativeMethods]::GetLastError())
    }

    if (![NativeMethods]::OpenProcessToken($processHandle, $TOKEN_DUPLICATE, [ref]$tokenHandle)){
        ThrowWin32Exception ([NativeMethods]::GetLastError())
    }

    if (![NativeMethods]::DuplicateTokenEx($tokenHandle, $TOKEN_ALL_ACCESS, [IntPtr]::Zero, $SecurityImpersonation, $TokenPrimary, [ref]$duplicateTokenHandle)) {
        ThrowWin32Exception ([NativeMethods]::GetLastError())
    }

    if (![NativeMethods]::CreateProcessWithTokenW($duplicateTokenHandle, 0, $applicationName, $commandLine, $creationFlags, [IntPtr]::Zero, $currentDirectory, [ref]$si, [ref]$pi)){
        ThrowWin32Exception ([NativeMethods]::GetLastError())
    }
}
finally {

    if(!$duplicateTokenHandle) {
        [NativeMethods]::CloseHandle($duplicateTokenHandle)
    }
    if(!$tokenHandle) {
        [NativeMethods]::CloseHandle($tokenHandle)
    }
    if(!$processHandle) {
        [NativeMethods]::CloseHandle($processHandle)
    }
}
