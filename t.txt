public class Debouncer
{
    private readonly int _delayMilliseconds;
    private CancellationTokenSource _cts;
    private DateTime _lastInvoke = DateTime.MinValue;
    private bool _pending = false;

    public Debouncer(int delayMilliseconds)
    {
        _delayMilliseconds = delayMilliseconds;
    }

    public void Debounce(Action action)
    {
        var now = DateTime.Now;
        if ((now - _lastInvoke).TotalMilliseconds > _delayMilliseconds)
        {
            // Not currently debouncing, run immediately
            _pending = false;
            _lastInvoke = now;
            action();
        }
        else
        {
            // Rapid call: debounce
            _pending = true;
            _cts?.Cancel();
            _cts = new CancellationTokenSource();
            var token = _cts.Token;

            Task.Delay(_delayMilliseconds, token)
                .ContinueWith(t =>
                {
                    if (!t.IsCanceled && _pending)
                    {
                        _pending = false;
                        _lastInvoke = DateTime.Now;
                        action();
                    }
                }, TaskScheduler.Current);
        }
    }
}
