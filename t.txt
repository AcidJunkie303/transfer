public static class IQueryableExtensions
{
    public static IOrderedQueryable<T> OrderBy<T>(this IQueryable<T> source, string propertyName)
    {
        return ApplyOrder(source, propertyName, "OrderBy");
    }

    public static IOrderedQueryable<T> OrderByDescending<T>(this IQueryable<T> source, string propertyName)
    {
        return ApplyOrder(source, propertyName, "OrderByDescending");
    }

    public static IOrderedQueryable<T> ThenBy<T>(this IOrderedQueryable<T> source, string propertyName)
    {
        return ApplyOrder(source, propertyName, "ThenBy");
    }

    public static IOrderedQueryable<T> ThenByDescending<T>(this IOrderedQueryable<T> source, string propertyName)
    {
        return ApplyOrder(source, propertyName, "ThenByDescending");
    }

    private static IOrderedQueryable<T> ApplyOrder<T>(IQueryable<T> source, string propertyName, string methodName)
    {
        // Get the property info
        var type = typeof(T);
        var property = type.GetProperty(propertyName, 
            BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance);
        
        if (property == null)
        {
            throw new ArgumentException($"Property '{propertyName}' not found on type {type.Name}");
        }

        // Create parameter expression: x
        var parameter = Expression.Parameter(type, "x");
        
        // Create property access expression: x.PropertyName
        var propertyAccess = Expression.Property(parameter, property);
        
        // Create lambda expression: x => x.PropertyName
        var lambda = Expression.Lambda(propertyAccess, parameter);

        // Create the method call expression
        var methodCallExpression = Expression.Call(
            typeof(Queryable),
            methodName,
            new Type[] { type, property.PropertyType },
            source.Expression,
            Expression.Quote(lambda));

        // Return new query
        return (IOrderedQueryable<T>)source.Provider.CreateQuery<T>(methodCallExpression);
    }
}
